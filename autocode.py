import os
import xml.etree.ElementTree as XMLElementTree
import generators
import util

data = XMLElementTree.parse("data.xml").getroot()

# PlaceholderTupleArrayExample: "[("!!AUTOGENERATED CODE!!", generatorA)]"
def autocode(templateFilePath, outputFilePath, placeholderGeneratorTupleArray):
    # Load and prepare the template
    code = ""

    with open(templateFilePath, mode="rt") as templateFile:
        for line in templateFile:
            code += line
    if code is "":
        raise Exception("Template file is empty.")
    
    # Locate placeholders and run autocoders
    for t in placeholderGeneratorTupleArray:
        placeholder = "/**" + t[0] + "**/"
        # Find indentation
        indentation = ""
        for line in code.split("\n"):
            if placeholder in line:
                indentation = line[0 : (len(line) - len(line.lstrip()))]
        generator = t[1]
        
        if placeholder not in code:
            raise Exception("Could not find placeholder '" + placeholder + "' in template file 'templates/" + templateFilePath + "'")
        generatedCode = "\n/* Autogenerated Code Begins */\n" + (generator(data).strip() or "") + "\n/* Autogenerated Code Ends */\n"
        
        # Apply indentation to generated code
        generatedCode = generatedCode.replace("\n", ("\n" + indentation))

        code = code.replace(placeholder, generatedCode)

    # Write code to output
    with open(outputFilePath, mode="w+") as out:
        out.write(code)

    print("Successfully auto-coded " + outputFilePath + ".")

autocode("templates/data.template.h", "output/data.h", [("!!AUTO-GENERATE HERE!!", generators.generateDataHeader)])
autocode("templates/TelemetryLoop.template.cpp", "output/TelemetryLoop.cpp", [("!!AUTO-GENERATE HERE!!", generators.generateBufferContents)])